import logging
import requests
import asyncio
from telegram import Update, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from config import TELEGRAM_TOKEN, OPENAI_API_KEY
from openai import AsyncOpenAI
from parser import get_important_events
import re

logging.basicConfig(level=logging.INFO)
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

reply_keyboard = [["üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"], ["üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ BTC", "üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ ETH"], ["üìä –û—Ü–µ–Ω–∏—Ç—å –∞–ª—å—Ç—Å–µ–∑–æ–Ω"]]
menu_keyboard = [["üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"], ["üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç"]]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ BTC":
        context.user_data["price_asset"] = "BTC"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC (–Ω–∞–ø—Ä–∏–º–µ—Ä, 103500):")
    elif text == "üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ ETH":
        context.user_data["price_asset"] = "ETH"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É ETH (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3820):")
    elif "price_asset" in context.user_data:
        try:
            price = float(text.replace(",", ".").replace("$", ""))
            asset = context.user_data.pop("price_asset")
            prompt = (
                f"–¶–µ–Ω–∞ {asset}: ${price}\n"
                "–û—Ü–µ–Ω–∏:\n"
                "1. –í–æ–∑–º–æ–∂–Ω–∞ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è?\n"
                "2. –†–∏—Å–∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –≤–Ω–∏–∑?\n"
                "3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–∏ –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥?\n–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ."
            )
            response = await client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            await update.message.reply_text(f"üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ {asset}:\n\n{response.choices[0].message.content.strip()}", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))

    elif text == "üìä –û—Ü–µ–Ω–∏—Ç—å –∞–ª—å—Ç—Å–µ–∑–æ–Ω":
        try:
            global_data = requests.get("https://api.coingecko.com/api/v3/global").json()
            btc_d = round(global_data["data"]["market_cap_percentage"]["btc"], 2)
            eth_d = round(global_data["data"]["market_cap_percentage"]["eth"], 2)
            eth_btc = round(
                requests.get("https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=btc").json()["ethereum"]["btc"],
                5
            )
            prompt = (
                f"BTC Dominance: {btc_d}%\nETH Dominance: {eth_d}%\nETH/BTC: {eth_btc}\n"
                "–û—Ü–µ–Ω–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞."
            )
            response = await client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            await update.message.reply_text(f"üìä –ê–ª—å—Ç—Å–µ–∑–æ–Ω:\n\n{response.choices[0].message.content.strip()}", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))

    elif text == "üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏":
        context.user_data["awaiting_event"] = True
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–°—Ç–∞–≤–∫–∞ –§–†–°: —Ñ–∞–∫—Ç 5.5%, –ø—Ä–æ–≥–Ω–æ–∑ 5.25%`", parse_mode="Markdown")

    elif context.user_data.get("awaiting_event"):
        context.user_data.pop("awaiting_event")
        try:
            match = re.search(r"(.*?): —Ñ–∞–∫—Ç\s*([\d.,%]+),?\s*–ø—Ä–æ–≥–Ω–æ–∑\s*([\d.,%]+)", text, re.IGNORECASE)
            if not match:
                raise ValueError("–§–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
            event, actual, forecast = match.groups()
            actual_val = float(actual.replace('%', '').replace(',', '.'))
            forecast_val = float(forecast.replace('%', '').replace(',', '.'))
            prompt = (
                f"–°–æ–±—ã—Ç–∏–µ: {event}\n"
                f"–§–∞–∫—Ç: {actual_val} | –ü—Ä–æ–≥–Ω–æ–∑: {forecast_val}\n\n"
                "–ö–∞–∫ —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ–ª–ª–∞—Ä, —Ä—ã–Ω–æ–∫ –∏ –∫—Ä–∏–ø—Ç—É? –ö—Ä–∞—Ç–∫–æ."
            )
            response = await client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            await update.message.reply_text(f"üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n\n{response.choices[0].message.content.strip()}", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))

    elif text == "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        await start(update, context)

    elif text == "üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç":
        await publish_post(update)

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))

async def publish_post(update: Update):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", url="https://t.me/Parser_newbot")]
    ])
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "üîî –ó–¥–µ—Å—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚Ä¢ –í–∞–∂–Ω—ã–µ –º–∞–∫—Ä–æ–¥–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π\n"
        "‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–µ –∏–¥–µ–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"
    )
    await update.message.reply_text(text, reply_markup=keyboard)

async def hourly_news_check(app):
    await asyncio.sleep(10)
    while True:
        try:
            events = get_important_events(debug=False)
            for e in events:
                if e.get("actual") and e.get("forecast") and e.get("bulls", 0) == 3:
                    try:
                        event = e['event']
                        actual = float(e['actual'].replace(',', '.').replace('%', ''))
                        forecast = float(e['forecast'].replace(',', '.').replace('%', ''))
                        prompt = (
                            f"–°–æ–±—ã—Ç–∏–µ: {event}\n"
                            f"–§–∞–∫—Ç: {actual} | –ü—Ä–æ–≥–Ω–æ–∑: {forecast}\n\n"
                            "–ö–∞–∫ —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ–ª–ª–∞—Ä, —Ä—ã–Ω–æ–∫ –∏ –∫—Ä–∏–ø—Ç—É? –ö—Ä–∞—Ç–∫–æ."
                        )
                        response = await client.chat.completions.create(
                            model="gpt-3.5-turbo",
                            messages=[{"role": "user", "content": prompt}]
                        )
                        interpretation = response.choices[0].message.content.strip()
                        summary = (
                            f"üîî –ù–æ–≤–æ—Å—Ç—å: {event}\n"
                            f"üïí –í—Ä–µ–º—è: {e['time']}\n"
                            f"–§–∞–∫—Ç: {e['actual']} | –ü—Ä–æ–≥–Ω–æ–∑: {e['forecast']}\n"
                            f"{e['summary']}\n\n"
                            f"üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è GPT:\n{interpretation}"
                        )
                        for user_id in [app.bot.owner_id]:
                            await app.bot.send_message(chat_id=user_id, text=summary, reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
                    except Exception as ex:
                        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {ex}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await asyncio.sleep(3600)

async def post_init(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("publish", "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
    ])
    asyncio.create_task(hourly_news_check(app))

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("publish", publish_post))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()

















