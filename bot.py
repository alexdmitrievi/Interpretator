import asyncio
import os
import requests
from telegram import Update, ReplyKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from config import TELEGRAM_TOKEN, CHAT_ID, OPENAI_API_KEY
from parser import get_important_events
from datetime import datetime
import pytz
from interpreter import btc_eth_forecast
from openai import AsyncOpenAI

client = AsyncOpenAI(api_key=OPENAI_API_KEY)

keyboard = ReplyKeyboardMarkup(
    [
        ["üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"],
        ["üî¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è"],
        ["üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ BTC", "üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ ETH"],
        ["üìä –û—Ü–µ–Ω–∏—Ç—å –∞–ª—å—Ç—Å–µ–∑–æ–Ω"],
        ["üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏":
        await send_digest(update.effective_chat.id, context, debug=False)
    elif text == "üî¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è":
        await send_digest(update.effective_chat.id, context, debug=True)
    elif text == "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        await start(update, context)
    elif text == "üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ BTC":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC (–Ω–∞–ø—Ä–∏–º–µ—Ä, 104230):", reply_markup=keyboard)
        context.user_data["awaiting_btc_price"] = True
    elif text == "üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ ETH":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3820):", reply_markup=keyboard)
        context.user_data["awaiting_eth_price"] = True
    elif text == "üìä –û—Ü–µ–Ω–∏—Ç—å –∞–ª—å—Ç—Å–µ–∑–æ–Ω":
        await assess_altseason(update, context)
    elif context.user_data.get("awaiting_btc_price"):
        context.user_data["awaiting_btc_price"] = False
        try:
            price = float(text.replace(",", ".").replace("$", "").strip())
            forecast = await gpt_price_forecast("BTC", price)
            await update.message.reply_text(forecast, reply_markup=keyboard)
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 103500", reply_markup=keyboard)
    elif context.user_data.get("awaiting_eth_price"):
        context.user_data["awaiting_eth_price"] = False
        try:
            price = float(text.replace(",", ".").replace("$", "").strip())
            forecast = await gpt_price_forecast("ETH", price)
            await update.message.reply_text(forecast, reply_markup=keyboard)
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3820", reply_markup=keyboard)

async def assess_altseason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        r = requests.get("https://api.coingecko.com/api/v3/global", timeout=10)
        data = r.json()
        btc_d = round(data["data"]["market_cap_percentage"]["btc"], 2)
        eth_d = round(data["data"]["market_cap_percentage"]["eth"], 2)

        eth_btc_resp = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=btc", timeout=10)
        eth_btc_data = eth_btc_resp.json()

        if "ethereum" not in eth_btc_data or "btc" not in eth_btc_data["ethereum"]:
            raise ValueError("–ü–∞—Ä–∞ ETH/BTC –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ CoinGecko")

        eth_btc = round(eth_btc_data["ethereum"]["btc"], 5)

        prompt = (
            f"BTC Dominance: {btc_d}%\nETH Dominance: {eth_d}%\nETH/BTC: {eth_btc}\n"
            "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –æ—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–µ–Ω –∞–ª—å—Ç—Å–µ–∑–æ–Ω."
            " –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ: 1) –æ—Ü–µ–Ω–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏, 2) –∞—Ä–≥—É–º–µ–Ω—Ç—ã, 3) –æ–±—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ."
        )

        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )

        result = (
            f"üìä –û—Ü–µ–Ω–∫–∞ –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞:\n\n"
            f"‚ñ™Ô∏è BTC Dominance: {btc_d}%\n"
            f"‚ñ™Ô∏è ETH Dominance: {eth_d}%\n"
            f"‚ñ™Ô∏è ETH/BTC: {eth_btc}\n\n"
            f"üß† GPT: {response.choices[0].message.content.strip()}"
        )
        await update.message.reply_text(result, reply_markup=keyboard)

    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞]: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞: {e}", reply_markup=keyboard)

async def gpt_price_forecast(asset, price):
    prompt = (
        f"–¶–µ–Ω–∞ {asset}: ${price}\n"
        "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∏—á–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞ –æ—Ü–µ–Ω–∏:\n"
        "1. –í–æ–∑–º–æ–∂–Ω–∞ –ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∏ –¥–æ –∫–∞–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π?\n"
        "2. –ö–∞–∫–æ–≤ —Ä–∏—Å–∫ –º–µ–¥–≤–µ–∂—å–µ–≥–æ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞?\n"
        "3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–∏ –±—ã—á—å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞?\n"
        "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º."
    )
    try:
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return f"üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ {asset}:\n\n{response.choices[0].message.content.strip()}"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {e}"

async def gpt_interpretation(event, actual, forecast):
    prompt = (
        f"–°–æ–±—ã—Ç–∏–µ: {event}\n"
        f"–§–∞–∫—Ç: {actual}, –ü—Ä–æ–≥–Ω–æ–∑: {forecast}\n"
        "1. –ö–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –¥–æ–ª–ª–∞—Ä, —Ñ–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É?\n"
        "2. –ú–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å—Ç–∞—Ç—å –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø—Ä–∏—Ç–æ–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –±—ã—á—å–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞?\n"
        "3. –ú–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –º–µ–¥–≤–µ–∂—å–µ–º—É —Ä—ã–Ω–∫—É?\n"
        "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, –Ω–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."
    )
    try:
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        content = response.choices[0].message.content.strip()

        text_lower = content.lower()
        is_bullish = any(word in text_lower for word in ["–∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä", "–ø—Ä–∏—Ç–æ–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏", "—Å–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç"])
        is_bearish = any(word in text_lower for word in ["—Ä–∞–∑–≤–æ—Ä–æ—Ç", "–º–µ–¥–≤–µ–∂–∏–π", "–æ–±–≤–∞–ª", "—É—Ö–æ–¥ –≤ —Ä–∏—Å–∫–∏"])

        return content, is_bullish, is_bearish
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {e}", False, False

async def send_digest(chat_id, context, debug=False):
    events = get_important_events(debug=debug)

    if not events:
        await context.bot.send_message(chat_id=chat_id, text="üîç –°–µ–π—á–∞—Å –Ω–µ—Ç –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.", reply_markup=keyboard)
        return

    if "error" in events[0]:
        await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è {events[0]['error']}", reply_markup=keyboard)
        return

    for e in events:
        bull_emoji = "üêÇ" * e.get("bulls", 0)
        header = f"{bull_emoji} {e['event']}"

        text = (
            f"üìä {header}\n"
            f"üïí –í—Ä–µ–º—è: {e['time']}\n"
            f"–§–∞–∫—Ç: {e['actual']} | –ü—Ä–æ–≥–Ω–æ–∑: {e['forecast']}\n"
            f"{e['summary']}\n"
            f"üîÆ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {e['probability']}%"
        )

        if not debug and e.get("bulls") == 3:
            try:
                delta = float(e['actual']) - float(e['forecast'])
                forecast = btc_eth_forecast(e['event'], delta)
                text += f"\n\nüí° {forecast}"
            except:
                pass

        if not debug:
            gpt_comment, is_bullish, is_bearish = await gpt_interpretation(e['event'], e['actual'], e['forecast'])
            text += f"\n\nüß† –ú–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:\n{gpt_comment}"
            if is_bullish:
                text += "\n\nüöÄ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–æ—Å—Ç–∞"
            if is_bearish:
                text += "\n\n‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç —Ç—Ä–µ–Ω–¥–∞ –≤ –º–µ–¥–≤–µ–∂—å—é —Ñ–∞–∑—É"

        await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard)

async def auto_loop(app: Application):
    from telegram import InlineKeyboardMarkup

    await asyncio.sleep(60)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞

    keyboard = InlineKeyboardMarkup([])  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å

    while True:
        try:
            await send_digest(CHAT_ID, app, debug=False)

            moscow = pytz.timezone("Europe/Moscow")
            now = datetime.now(moscow).strftime("%H:%M")

            await app.bot.send_message(
                chat_id=CHAT_ID,
                text=f"‚è∞ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω –≤ {now} (–ú–°–ö). –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞.",
                reply_markup=keyboard
            )

        except Exception as e:
            await app.bot.send_message(
                chat_id=CHAT_ID,
                text=f"‚ùå –û—à–∏–±–∫–∞: {e}",
                reply_markup=keyboard
            )

        await asyncio.sleep(3 * 3600)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 3 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞

async def after_startup(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("digest", "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"),
        BotCommand("upcoming", "–û–∂–∏–¥–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è"),
        BotCommand("btc", "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ BTC"),
        BotCommand("eth", "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ ETH"),
        BotCommand("alts", "–û—Ü–µ–Ω–∏—Ç—å –∞–ª—å—Ç—Å–µ–∑–æ–Ω")
    ])
    await app.bot.send_message(chat_id=CHAT_ID, text="ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å.", reply_markup=keyboard)
    asyncio.create_task(auto_loop(app))

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).post_init(after_startup).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()












