import asyncio
import openai
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from config import TELEGRAM_TOKEN, CHAT_ID, OPENAI_API_KEY
from parser import get_important_events
from datetime import datetime
import pytz
from interpreter import btc_eth_forecast

openai.api_key = OPENAI_API_KEY

keyboard = ReplyKeyboardMarkup(
    [["üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∂–¥–∏ ‚Äî —è —Å–∞–º –ø—Ä–∏—à–ª—é –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.",
        reply_markup=keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏":
        await send_digest(update.effective_chat.id, context)

async def gpt_interpretation(event, actual, forecast):
    prompt = (
        f"–°–æ–±—ã—Ç–∏–µ: {event}\n"
        f"–§–∞–∫—Ç: {actual}, –ü—Ä–æ–≥–Ω–æ–∑: {forecast}\n"
        "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–∞–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫: –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –¥–æ–ª–ª–∞—Ä, —Ñ–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É?"
    )
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {e}"

async def send_digest(chat_id, context):
    events = get_important_events()

    if not events:
        await context.bot.send_message(chat_id=chat_id, text="üîç –°–µ–π—á–∞—Å –Ω–µ—Ç –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
        return

    if "error" in events[0]:
        await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è {events[0]['error']}")
        return

    for e in events:
        bull_emoji = "üêÇ" * e.get("bulls", 0)
        header = f"{bull_emoji} {e['event']}"

        text = (
            f"üìä {header}\n"
            f"üïí –í—Ä–µ–º—è: {e['time']}\n"
            f"–§–∞–∫—Ç: {e['actual']} | –ü—Ä–æ–≥–Ω–æ–∑: {e['forecast']}\n"
            f"{e['summary']}\n"
            f"üîÆ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {e['probability']}%"
        )

        if e.get("bulls") == 3:
            delta = float(e['actual']) - float(e['forecast'])
            forecast = btc_eth_forecast(e['event'], delta)
            text += f"\n\nüí° {forecast}"

        gpt_comment = await gpt_interpretation(e['event'], e['actual'], e['forecast'])
        text += f"\n\nüß† –ú–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:\n{gpt_comment}"

        await context.bot.send_message(chat_id=chat_id, text=text)

async def auto_loop(app: Application):
    await asyncio.sleep(60)
    while True:
        try:
            await send_digest(CHAT_ID, app)
            moscow = pytz.timezone("Europe/Moscow")
            now = datetime.now(moscow).strftime("%H:%M")
            await app.bot.send_message(chat_id=CHAT_ID, text=f"‚è∞ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω –≤ {now} (–ú–°–ö). –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç.")
        except Exception as e:
            await app.bot.send_message(chat_id=CHAT_ID, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(3600)

async def after_startup(app: Application):
    await app.bot.send_message(chat_id=CHAT_ID, text="ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å.")
    asyncio.create_task(auto_loop(app))

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).post_init(after_startup).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()




