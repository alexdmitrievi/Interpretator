import logging
import requests
import asyncio
from telegram import Update, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from config import TELEGRAM_TOKEN, OPENAI_API_KEY
from openai import AsyncOpenAI
from parser import get_important_events, parse_event_page
from interpreter import interpret_event, get_trading_signal
import re

logging.basicConfig(level=logging.INFO)
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

reply_keyboard = [["üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"], ["üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ BTC", "üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ ETH"], ["üìä –û—Ü–µ–Ω–∏—Ç—å –∞–ª—å—Ç—Å–µ–∑–æ–Ω"]]
menu_keyboard = [["üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"], ["üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç"]]

waiting_users = set()
DEBUG_MODE = False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"[COMMAND] /start –æ—Ç {update.effective_user.id}")
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id

if "investing.com/economic-calendar" in text:
    import re
    match = re.search(r"https?://[^\s]+", text)
    if not match:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞.", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return

    url = match.group(0)
    await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ...")
    result = parse_event_page(url)

    if "error" in result:
        await update.message.reply_text(f"‚ö†Ô∏è {result['error']}", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return

    if "actual" not in result or "forecast" not in result:
        msg = f"üìä –°–æ–±—ã—Ç–∏–µ: {result['event']}\n{result['summary']}"
        await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        return

    msg = (
        f"üìä –°–æ–±—ã—Ç–∏–µ: {result['event']}\n"
        f"–§–∞–∫—Ç: {result['actual']} | –ü—Ä–æ–≥–Ω–æ–∑: {result['forecast']}\n"
        f"üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {result['summary']}"
    )

    delta = float(result['actual'].replace('%', '').replace(',', '.')) - float(result['forecast'].replace('%', '').replace(',', '.'))
    signal_btc, signal_eth = get_trading_signal(result['event'], delta)
    msg += f"\nüìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n‚Ä¢ BTC: {signal_btc}\n‚Ä¢ ETH: {signal_eth}"

    try:
        gpt_prompt = (
            f"–°–æ–±—ã—Ç–∏–µ: {result['event']}\n"
            f"–§–∞–∫—Ç: {result['actual']} | –ü—Ä–æ–≥–Ω–æ–∑: {result['forecast']}\n"
            "–ö–∞–∫ —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ–ª–ª–∞—Ä, —Ä—ã–Ω–æ–∫ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã? –ö—Ä–∞—Ç–∫–æ."
        )
        gpt_response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": gpt_prompt}]
        )
        gpt_text = gpt_response.choices[0].message.content.strip()
        msg += f"\nüß† GPT: {gpt_text}"
    except Exception as e:
        msg += f"\n‚ö†Ô∏è GPT-–æ—à–∏–±–∫–∞: {e}"

    await update.message.reply_text(msg, reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
    return


    if text == "üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ BTC":
        context.user_data["price_asset"] = "BTC"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC (–Ω–∞–ø—Ä–∏–º–µ—Ä, 103500):")

    elif text == "üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ ETH":
        context.user_data["price_asset"] = "ETH"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É ETH (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3820):")

    elif "price_asset" in context.user_data:
        try:
            price = float(text.replace(",", ".").replace("$", ""))
            asset = context.user_data.pop("price_asset")
            prompt = (
                f"–¶–µ–Ω–∞ {asset}: ${price}\n"
                "–û—Ü–µ–Ω–∏:\n"
                "1. –í–æ–∑–º–æ–∂–Ω–∞ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è?\n"
                "2. –†–∏—Å–∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ –≤–Ω–∏–∑?\n"
                "3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–∏ –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥?\n–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ."
            )
            response = await client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            await update.message.reply_text(f"üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ {asset}:\n\n{response.choices[0].message.content.strip()}", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))

    elif text == "üìä –û—Ü–µ–Ω–∏—Ç—å –∞–ª—å—Ç—Å–µ–∑–æ–Ω":
        try:
            global_data = requests.get("https://api.coingecko.com/api/v3/global", timeout=10).json()
            if "data" not in global_data:
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç CoinGecko: {global_data}")
            btc_d = round(global_data["data"]["market_cap_percentage"]["btc"], 2)
            eth_d = round(global_data["data"]["market_cap_percentage"]["eth"], 2)
            eth_btc_resp = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=btc", timeout=10)
            eth_btc_data = eth_btc_resp.json()
            eth_btc = round(eth_btc_data["ethereum"]["btc"], 5)
            prompt = (
                f"BTC Dominance: {btc_d}%\n"
                f"ETH Dominance: {eth_d}%\n"
                f"ETH/BTC: {eth_btc}\n"
                "–û—Ü–µ–Ω–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞."
            )
            response = await client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            await update.message.reply_text(f"üìä –ê–ª—å—Ç—Å–µ–∑–æ–Ω:\n\n{response.choices[0].message.content.strip()}", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))

    elif text == "üß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏":
        await update.message.reply_text("üìé –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —Å Investing.com (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://ru.investing.com/economic-calendar/gdp-119)", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))

    elif text == "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        await start(update, context)

    elif text == "üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç":
        await publish_post(update, context)

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))

async def publish_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"[COMMAND] /publish –æ—Ç {update.effective_user.id}")
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", url="https://t.me/Parser_newbot")]
    ])
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "üîî –ó–¥–µ—Å—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚Ä¢ –í–∞–∂–Ω—ã–µ –º–∞–∫—Ä–æ–¥–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π\n"
        "‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–µ –∏–¥–µ–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"
    )
    await update.message.reply_text(text, reply_markup=keyboard)

async def post_init(app):
    logging.info("[INIT] post_init –∑–∞–ø—É—â–µ–Ω")
    await app.bot.set_my_commands([
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("publish", "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
    ])
    asyncio.create_task(hourly_news_check(app))

async def hourly_news_check(app):
    await asyncio.sleep(10)
    return

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("publish", publish_post))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()






















